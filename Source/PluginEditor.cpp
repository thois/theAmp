/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TheAmpAudioProcessorEditor::TheAmpAudioProcessorEditor (TheAmpAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p),
    infoLabel (String::empty),
    gainLabel ("", "Gain:"),
    trebleLabel ("", "Treble:"),
    middleLabel ("", "Middle:"),
    bassLabel ("", "Bass:"),
    gainSlider ("gain"),
    trebleSlider ("treble"),
    middleSlider ("middle"),
    bassSlider ("bass")
{
    // add some sliders..
    addAndMakeVisible (gainSlider);
    gainSlider.setSliderStyle (Slider::Rotary);
    gainSlider.addListener (this);
    gainSlider.setRange (0.0, 1.0, 0.01);
    
    addAndMakeVisible (trebleSlider);
    trebleSlider.setSliderStyle (Slider::Rotary);
    trebleSlider.addListener (this);
    trebleSlider.setRange (0.0, 1.0, 0.01);
    
    addAndMakeVisible (middleSlider);
    middleSlider.setSliderStyle (Slider::Rotary);
    middleSlider.addListener (this);
    middleSlider.setRange (0.0, 1.0, 0.01);
    
    addAndMakeVisible (bassSlider);
    bassSlider.setSliderStyle (Slider::Rotary);
    bassSlider.addListener (this);
    bassSlider.setRange (0.0, 1.0, 0.01);
    
    
    // add some labels for the sliders..
    gainLabel.attachToComponent (&gainSlider, false);
    gainLabel.setFont (Font (11.0f));
    
    trebleLabel.attachToComponent (&trebleSlider, false);
    trebleLabel.setFont (Font (11.0f));
    
    middleLabel.attachToComponent (&middleSlider, false);
    middleLabel.setFont (Font (11.0f));
    
    bassLabel.attachToComponent (&bassSlider, false);
    bassLabel.setFont (Font (11.0f));
    
    
    // add the triangular resizer component for the bottom-right of the UI
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (300, 200, 800, 300);
    
    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (p.lastUIWidth,
             p.lastUIHeight);
    
    startTimer (50);
}

TheAmpAudioProcessorEditor::~TheAmpAudioProcessorEditor()
{
}

//==============================================================================
void TheAmpAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::white, 0, 0,
                                       Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();

}

void TheAmpAudioProcessorEditor::resized()
{
    infoLabel.setBounds (10, 4, 400, 25);
    gainSlider.setBounds (20, 70, 150, 40);
    trebleSlider.setBounds (200, 120, 150, 40);
    middleSlider.setBounds (200, 70, 150, 40);
    bassSlider.setBounds (200, 20, 150, 40);
    
    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);
    
    getProcessor().lastUIWidth = getWidth();
    getProcessor().lastUIHeight = getHeight();
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void TheAmpAudioProcessorEditor::timerCallback()
{
    TheAmpAudioProcessor& ourProcessor = getProcessor();
    
    AudioPlayHead::CurrentPositionInfo newPos (ourProcessor.lastPosInfo);
    
    if (lastDisplayedPosition != newPos)
        displayPositionInfo (newPos);
    
    //gainSlider.setValue (ourProcessor.gain->getValue(), dontSendNotification);
    //trebleSlider.setValue (ourProcessor.treble->getValue(), dontSendNotification);
    //middleSlider.setValue (ourProcessor.middle->getValue(), dontSendNotification);
    //bassSlider.setValue (ourProcessor.bass->getValue(), dontSendNotification);
}

// This is our Slider::Listener callback, when the user drags a slider.
void TheAmpAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        // It's vital to use setValueNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        param->setValueNotifyingHost ((float) slider->getValue());
        if (slider == &trebleSlider || slider == &middleSlider || slider == &bassSlider)
        {
            //TheAmpAudioProcessor& ourProcessor = getProcessor();
            //ourProcessor.changeEQ();
        }
    }
}

void TheAmpAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->beginChangeGesture();
    }
}

void TheAmpAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->endChangeGesture();
    }
}


//==============================================================================

AudioProcessorParameter* TheAmpAudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{/*
    if (slider == &gainSlider)
        return getProcessor().gain;
    
    if (slider == &trebleSlider)
        return getProcessor().treble;
    
    if (slider == &middleSlider)
        return getProcessor().middle;
    
    if (slider == &bassSlider)
        return getProcessor().bass;
    */
    return nullptr;
}

// quick-and-dirty function to format a timecode string
static String timeToTimecodeString (const double seconds)
{
    const double absSecs = std::abs (seconds);
    
    const int hours =  (int) (absSecs / (60.0 * 60.0));
    const int mins  = ((int) (absSecs / 60.0)) % 60;
    const int secs  = ((int) absSecs) % 60;
    
    String s (seconds < 0 ? "-" : "");
    
    s << String (hours).paddedLeft ('0', 2) << ":"
    << String (mins) .paddedLeft ('0', 2) << ":"
    << String (secs) .paddedLeft ('0', 2) << ":"
    << String (roundToInt (absSecs * 1000) % 1000).paddedLeft ('0', 3);
    
    return s;
}

// quick-and-dirty function to format a bars/beats string
static String ppqToBarsBeatsString (double ppq, double /*lastBarPPQ*/, int numerator, int denominator)
{
    if (numerator == 0 || denominator == 0)
        return "1|1|0";
    
    const int ppqPerBar = (numerator * 4 / denominator);
    const double beats  = (fmod (ppq, ppqPerBar) / ppqPerBar) * numerator;
    
    const int bar    = ((int) ppq) / ppqPerBar + 1;
    const int beat   = ((int) beats) + 1;
    const int ticks  = ((int) (fmod (beats, 1.0) * 960.0 + 0.5));
    
    String s;
    s << bar << '|' << beat << '|' << ticks;
    return s;
}


// Updates the text in our position label.
void TheAmpAudioProcessorEditor::displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos)
{
    lastDisplayedPosition = pos;
    String displayText;
    displayText.preallocateBytes (128);
    
    displayText << String (pos.bpm, 2) << " bpm, "
    << pos.timeSigNumerator << '/' << pos.timeSigDenominator
    << "  -  " << timeToTimecodeString (pos.timeInSeconds)
    << "  -  " << ppqToBarsBeatsString (pos.ppqPosition, pos.ppqPositionOfLastBarStart,
                                        pos.timeSigNumerator, pos.timeSigDenominator);
    
    if (pos.isRecording)
        displayText << "  (recording)";
    else if (pos.isPlaying)
        displayText << "  (playing)";
    
    infoLabel.setText ("[" + SystemStats::getJUCEVersion() + "]   " + displayText, dontSendNotification);
}

