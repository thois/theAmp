/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "FenderEQ.h"
#include "Resample.h"
/*
class FloatParameter : public AudioProcessorParameter
{
public:
    
    FloatParameter (float defaultParameterValue, const String& paramName)
    : defaultValue (defaultParameterValue),
    value (defaultParameterValue),
    name (paramName)
    {
    }
    
    float getValue() const override
    {
        return value;
    }
    
    void setValue (float newValue) override
    {
        value = newValue;
        
    }
    
    float getDefaultValue() const override
    {
        return defaultValue;
    }
    
    String getName (int maximumStringLength) const override
    {
        return name;
    }
    
    String getLabel() const override
    {
        return String();
    }
    
    float getValueForText (const String& text) const override
    {
        return text.getFloatValue();
    }
    
private:
    float defaultValue, value;
    String name;
};

const float defaultTreble = 0.5f;
const float defaultMiddle = 0.5f;
const float defaultBass = 0.5f;
*/

const float defaultGain = 1.0f;
//==============================================================================
TheAmpAudioProcessor::TheAmpAudioProcessor()
{
    /*
    addParameter (gain  = new FloatParameter (defaultGain,  "gain"));
    addParameter (treble = new FloatParameter (defaultTreble, "treble"));
    addParameter (middle = new FloatParameter (defaultMiddle, "middle"));
     addParameter (bass = new FloatParameter (defaultBass, "bass"));
     */

    lastUIWidth = 400;
    lastUIHeight = 200;
    
    lastPosInfo.resetToDefault();
    fender.set_values(0.5, 0.5, 0.5);
}

TheAmpAudioProcessor::~TheAmpAudioProcessor()
{
}

//==============================================================================
const String TheAmpAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int TheAmpAudioProcessor::getNumParameters()
{
    return 4;
}

float TheAmpAudioProcessor::getParameter (int index)
{
    if (index == 0)
        return gain;
    else if (index == 1)
        return fender.get_treble();
    else if (index == 2)
        return fender.get_middle();
    else if (index == 3)
        return fender.get_low();
    else
        return 0.f;
}

void TheAmpAudioProcessor::setParameter (int index, float newValue)
{
    if (newValue > 1)
        newValue = 1;
    if (newValue < 0)
        newValue = 0;
    if (index == 0)
        gain = newValue;
    if (index == 1)
        fender.set_values(fender.get_low(), fender.get_middle(), newValue);
    if (index == 2)
        fender.set_values(fender.get_low(), newValue, fender.get_treble());
    if (index == 3)
        fender.set_values(newValue, fender.get_middle(), fender.get_treble());
}

const String TheAmpAudioProcessor::getParameterName (int index)
{
    if (index == 0)
        return "gain";
    else if (index == 1)
        return "treble";
    else if (index == 2)
        return "middle";
    else if (index == 3)
        return "bass";
    else
        return "out of bounds";
}

const String TheAmpAudioProcessor::getParameterText (int index)
{
    return String();
}

const String TheAmpAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TheAmpAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TheAmpAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TheAmpAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TheAmpAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool TheAmpAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool TheAmpAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double TheAmpAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int TheAmpAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int TheAmpAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TheAmpAudioProcessor::setCurrentProgram (int index)
{
}

const String TheAmpAudioProcessor::getProgramName (int index)
{
    return String();
}

void TheAmpAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TheAmpAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
  
	fender.set_samplerate_and_channels(2*sampleRate, getNumInputChannels());
    driveStages.push_back(DriveStage(2*sampleRate, 15000, 50, 20, 0.015, 250));
    driveStages.push_back(DriveStage(2*sampleRate, 6000, 60, 20, 0.010, 250));
    driveStages.push_back(DriveStage(2*sampleRate, 6000, 70, 20, 0.008, 250));
}

void TheAmpAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void TheAmpAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    buffer = resample.up(buffer);
    fender(buffer);
    //for (DriveStage& stage : driveStages)
    //  stage(buffer);
    buffer = resample.down(buffer);
    /*
    
    // ask the host for the current time so we can display it...
    AudioPlayHead::CurrentPositionInfo newTime;
    if (getPlayHead() != nullptr && getPlayHead()->getCurrentPosition (newTime))
    {
        // Successfully got the current time from the host..
        lastPosInfo = newTime;
    }
    else
    {
        // If the host fails to fill-in the current time, we'll just clear it to a default..
        lastPosInfo.resetToDefault();
    }
     */
}
/*
void TheAmpAudioProcessor::changeEQ()
{
    fender.set_values(bass->getValue(), middle->getValue(), treble->getValue());
}
*/
//==============================================================================
bool TheAmpAudioProcessor::hasEditor() const
{
    //return true; // (change this to false if you choose to not supply an editor)
    return false;
}

AudioProcessorEditor* TheAmpAudioProcessor::createEditor()
{
    return new TheAmpAudioProcessorEditor (*this);
}

//==============================================================================
void TheAmpAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    /*
    // Create an outer XML element..
    XmlElement xml ("MYPLUGINSETTINGS");
    
    // add some attributes to it..
    xml.setAttribute ("uiWidth", lastUIWidth);
    xml.setAttribute ("uiHeight", lastUIHeight);
    xml.setAttribute ("gain", gain);
    xml.setAttribute ("treble", treble->getValue());
    xml.setAttribute ("middle", middle->getValue());
    xml.setAttribute ("bass", bass->getValue());
    
    // then use this helper function to stuff it into the binary blob and return it..
    copyXmlToBinary (xml, destData);
    */
}

void TheAmpAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    // This getXmlFromBinary() helper function retrieves our XML from the binary blob..
    /*
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));
    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            // ok, now pull out our parameters..
            lastUIWidth  = xmlState->getIntAttribute ("uiWidth", lastUIWidth);
            lastUIHeight = xmlState->getIntAttribute ("uiHeight", lastUIHeight);
            
            gain->setValue (xmlState->getDoubleAttribute ("gain", gain->getValue()));
            treble->setValue (xmlState->getDoubleAttribute ("treble", treble->getValue()));
            middle->setValue (xmlState->getDoubleAttribute ("middle", middle->getValue()));
            bass->setValue (xmlState->getDoubleAttribute ("bass", bass->getValue()));
        }
    }
     */
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TheAmpAudioProcessor();
}
